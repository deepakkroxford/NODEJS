// using the express framework to create the apis 
const express = require('express');
const app = express();

const User = require('./models/User')
const {connectionMongodb} = require('./connection');

//connection 
connectionMongodb('mongodb://127.0.0.1:27017/youtube-app1')

app.use(express.urlencoded({ extended: false }));

app.get('/users', async(req, res) => {
    const allDbUsers = await User.find({}); 
    const html = `
        <ul>
            ${allDbUsers.map(user => `<li>${user.first_name}</li> <li>${user.id}</li>`).join('')}
        </ul>
    `;
    res.send(html);
})

app.get('/api/user', async(req, res) => {
    const allDbUsers = await User.find({}); 
    res.json(allDbUsers);
})

// find the user based on their id 
app.get('/api/user/:id',async (req, res) => {
    const {id}= req.params; 
    const user = await User.findById(id); // Find user by ID
    if (user) {
        res.json(user); // Send the user as JSON if found
    } else {
        res.status(404).json({ message: "User not found" }); // Handle case where user is not found
    }
});



// we have to add one middleware to see the upcoming request form the server so we use middleware 
// that i added in the line number 9 
app.post('/api/user', async(req, res) => {
    // what ever the data send by the user that is availble in the req.body
    const body = req.body;
    console.log("Body", body);
    if (!body.first_name || !body.last_name || !body.email || !body.gender || !body.job_title) {
        res.status(404).json({ message: 'enter all the details' });
    }
   const result = await User.create({
        first_name: body.first_name,
        last_name: body.last_name,
        email: body.email,
        gender: body.gender,
        job_title: body.job_title
    })

    console.log('New user created:', result);
    res.status(201).json({ message: 'User created successfully'});
})


// this path partially updates the existing user and it doesn't need change the all the data
app.patch('/api/user/:id',async(req,res)=>{
    const body = req.body;
    const {id } = req.params;
    const user = await User.findByIdAndUpdate(id,{last_name: body.last_name})
    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }
    res.json({ message: 'User updated successfully'});
})


// delete the user by id 
app.delete('/api/user/:id', async (req, res) => {
    const {id} = req.params;
    const user = await User.findByIdAndDelete(id);
    if (!user) {
        return res.status(404).json({ message: 'User not found' });
    }
    else{
    res.json({ message: 'User deleted successfully', deletedUser:user });
    }
});





//creating the server 
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server is running on http://localhost:${PORT}`);
})